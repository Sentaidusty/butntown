-- Converted from WindUI to Obsidian by DeepSeek Chat
local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CoreGui = game:GetService("CoreGui")

-- Safer default values
local aimbotLerpFactor = 0.3
local flingPower = 2500
local movel = 0.05
local hiddenfling = false
local glassESPEnabled = false
local glassESPConnections = {}
local safeGlassHighlights = {}
local rlglModule = {
    _IsGreenLight = false,
    _LastRootPartCFrame = nil,
    _OriginalNamecall = nil,
    _Connection = nil,
    _CleanupFunction = nil  -- Add this line
}

local Window = Library:CreateWindow({
    Title = "Agsy | Ink Game V2.5",
    Icon = 122545428580310,
    Center = true,
    AutoShow = true,
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 380),
})

-- Apply theme
ThemeManager:SetLibrary(Library)
ThemeManager:SetFolder("InkGameAgsy")
ThemeManager:ApplyToTab(Window.Tabs[1])

-- Main Tab
local MainTab = Window:AddTab("Main", "star")
local UtilityTab = Window:AddTab("Utility", "settings")
local MiscTab = Window:AddTab("Misc", "cctv")
local CombatTab = Window:AddTab("Combat", "crosshair")
local VisualTab = Window:AddTab("Visual", "eye")

-- Important Section
local ImportantGroup = MainTab:AddLeftGroupbox("Important")
ImportantGroup:AddLabel("Join Discord To Know Updates!"):AddButton({
    Text = "Copy Invite",
    Func = function()
        setclipboard("https://discord.gg/agsy")
        Library:Notify("Discord invite copied!", 3)
    end,
})

ImportantGroup:AddButton({
    Text = "Visit YouTube",
    Func = function()
        setclipboard("https://www.youtube.com/@incrediblebread")
        Library:Notify("YouTube link copied!", 3)
    end,
})

-- Anti Ban
local antiBanActive = false
ImportantGroup:AddToggle("AntiBanToggle", {
    Text = "Anti Ban",
    Tooltip = "Protects against anti-cheat detection",
    Default = false,
    Callback = function(state)
        if antiBanActive then return end
        antiBanActive = true
        
        -- Initialize anti-ban protection
        local rawmt = getrawmetatable(game)
        setreadonly(rawmt, false)
        
        -- Backup original methods
        local originalNamecall = rawmt.__namecall
        local originalIndex = rawmt.__index
        local originalNewIndex = rawmt.__newindex
        
        -- Namecall hook
        rawmt.__namecall = newcclosure(function(self, ...)
            local method = getnamecallmethod()
            
            -- Prevent certain remote calls from being detected
            if method == "FireServer" or method == "InvokeServer" then
                -- Whitelist safe remotes
                local remoteName = tostring(self)
                if remoteName:find("Dialogue") or remoteName:find("Effect") then
                    return originalNamecall(self, ...)
                end
                
                -- Delay and randomize calls to avoid detection
                task.wait(math.random() * 0.1)
            end
            
            return originalNamecall(self, ...)
        end)
        
        -- Index hook
        rawmt.__index = newcclosure(function(t, k)
            -- Prevent detection of certain property checks
            if tostring(k) == "WalkSpeed" or tostring(k) == "JumpPower" then
                return originalIndex(t, k)
            end
            return originalIndex(t, k)
        end)
        
        -- Newindex hook
        rawmt.__newindex = newcclosure(function(t, k, v)
            -- Prevent modification of certain properties from being detected
            if tostring(k) == "WalkSpeed" or tostring(k) == "JumpPower" then
                -- Allow modification but with slight randomization
                if math.random() > 0.5 then
                    task.wait(math.random() * 0.05)
                end
                return originalNewIndex(t, k, v)
            end
            return originalNewIndex(t, k, v)
        end)
        
        setreadonly(rawmt, true)
        Library:Notify("Anti-Ban protection activated", 5)
    end
})

-- OP Section
local OPSection = MainTab:AddRightGroupbox("OP")
OPSection:AddToggle("TouchFlingToggle", {
    Text = "Touch Fling",
    Tooltip = "Fling anyone who touches you",
    Default = false,
    Callback = function(state)
        hiddenfling = state
        if state then
            coroutine.wrap(fling)()
        end
    end
})

-- Fling function
local function fling()
    local lp = Players.LocalPlayer
    local character = lp.Character or lp.CharacterAdded:Wait()
    local hrp = character:WaitForChild("HumanoidRootPart")
    
    while hiddenfling do
        RunService.Heartbeat:Wait()
        if hiddenfling then
            local originalVelocity = hrp.Velocity
            hrp.Velocity = originalVelocity * 1.5 + Vector3.new(0, flingPower, 0)
            RunService.RenderStepped:Wait()
            hrp.Velocity = originalVelocity * 0.8
            RunService.Stepped:Wait()
            hrp.Velocity = originalVelocity + Vector3.new(0, movel, 0)
            movel = -movel
        end
    end
end

-- Anti-Fling
local antiFlingEnabled = false
local antiFlingConnection
OPSection:AddToggle("AntiFlingToggle", {
    Text = "Anti-Fling",
    Tooltip = "Stops other players from flinging you",
    Default = false,
    Callback = function(state)
        antiFlingEnabled = state
        if state then
            antiFlingConnection = RunService.Heartbeat:Connect(function()
                pcall(function()
                    local character = LocalPlayer.Character
                    if character then
                        local hrp = character:FindFirstChild("HumanoidRootPart")
                        local humanoid = character:FindFirstChildOfClass("Humanoid")
                        
                        if hrp and humanoid then
                            -- Only reduce horizontal velocity (x and z), preserve vertical (y) for jumping
                            local currentVel = hrp.Velocity
                            hrp.Velocity = Vector3.new(currentVel.X * 0.5, currentVel.Y, currentVel.Z * 0.5)
                            hrp.RotVelocity = Vector3.new(0, 0, 0)
                            
                            -- Additional check to prevent excessive velocity while still allowing jumps
                            if currentVel.Magnitude > 100 and humanoid:GetState() ~= Enum.HumanoidStateType.Jumping then
                                hrp.Velocity = Vector3.new(currentVel.X * 0.3, currentVel.Y, currentVel.Z * 0.3)
                            end
                        end
                    end
                end)
            end)
        else
            if antiFlingConnection then
                antiFlingConnection:Disconnect()
                antiFlingConnection = nil
            end
        end
    end
})

-- Red Light Green Light Section
local RLGLGroup = MainTab:AddLeftGroupbox("Red Light Green Light")
RLGLGroup:AddButton({
    Text = "Complete RLGL",
    Func = function()
        local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            hrp.CFrame = CFrame.new(-46, 1024, 110)
        end
    end
})

-- RLGL Godmode
local rlglGodmodeEnabled = false
local originalRLGLHook
local lastSafePosition
local isGreenLight = true

local function SetRLGLGodmode(enabled)
    if enabled then
        -- Track light changes
        game:GetService("ReplicatedStorage").Remotes.Effects.OnClientEvent:Connect(function(data)
            if data.EffectName == "TrafficLight" then
                isGreenLight = data.GreenLight
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    lastSafePosition = LocalPlayer.Character.HumanoidRootPart.CFrame
                end
            end
        end)

        originalRLGLHook = hookmetamethod(game, "__namecall", function(self, ...)
            local args = {...}
            if tostring(self) == "rootCFrame" and not isGreenLight and lastSafePosition then
                args[1] = lastSafePosition -- Freeze position during red light
            end
            return originalRLGLHook(self, unpack(args))
        end)
    elseif originalRLGLHook then
        hookmetamethod(game, "__namecall", originalRLGLHook)
        originalRLGLHook = nil
    end
end

RLGLGroup:AddToggle("RLGLGodmodeToggle", {
    Text = "Godmode",
    Tooltip = "Prevents detection during red light",
    Default = false,
    Callback = function(state)
        rlglGodmodeEnabled = state
        SetRLGLGodmode(state)
    end
})

-- Glass Bridge Section
local GlassBridgeGroup = MainTab:AddRightGroupbox("Glass Bridge")

-- Reveal Safe Glass
local glassESPEnabled = false
local glassHighlights = {}

local function RevealGlassBridge()
    local glassHolder = workspace:FindFirstChild("GlassBridge") and workspace.GlassBridge:FindFirstChild("GlassHolder")
    if not glassHolder then return end

    for _, tilePair in pairs(glassHolder:GetChildren()) do
        for _, tileModel in pairs(tilePair:GetChildren()) do
            if tileModel:IsA("Model") and tileModel.PrimaryPart then
                -- Clear existing highlight if any
                if glassHighlights[tileModel] then
                    glassHighlights[tileModel]:Destroy()
                    glassHighlights[tileModel] = nil
                end

                if not glassESPEnabled then continue end

                local isBreakable = tileModel.PrimaryPart:GetAttribute("exploitingisevil") == true
                local targetColor = isBreakable and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(0, 255, 0)
                
                -- Color the glass parts
                for _, part in pairs(tileModel:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.Color = targetColor
                        part.Transparency = 0.5
                    end
                end

                -- Add highlight
                local highlight = Instance.new("Highlight")
                highlight.FillColor = targetColor
                highlight.FillTransparency = 0.7
                highlight.OutlineTransparency = 0.5
                highlight.Parent = tileModel
                glassHighlights[tileModel] = highlight
            end
        end
    end
end

GlassBridgeGroup:AddToggle("GlassESPToggle", {
    Text = "Reveal Safe Glass",
    Tooltip = "Shows safe (green) and breakable (red) tiles",
    Default = false,
    Callback = function(state)
        glassESPEnabled = state
        if state then
            RevealGlassBridge()
            -- Monitor for bridge changes
            workspace.DescendantAdded:Connect(function(descendant)
                if descendant.Name == "GlassBridge" then
                    RevealGlassBridge()
                end
            end)
        else
            -- Cleanup highlights
            for tile, highlight in pairs(glassHighlights) do
                if highlight then highlight:Destroy() end
            end
            table.clear(glassHighlights)
        end
    end
})

GlassBridgeGroup:AddButton({
    Text = "Teleport to End",
    Func = function()
        local char = LocalPlayer.Character
        if char and char:FindFirstChild("HumanoidRootPart") then
            char:PivotTo(CFrame.new(-203.9, 520.7, -1534.3485) + Vector3.new(0, 5, 0))
        end
    end
})

-- Mingle Section
local MingleGroup = MainTab:AddLeftGroupbox("Mingle")

-- Auto Chokehold
local autoChokeholdEnabled = false
local chokeholdConnection

local function AutoMingle()
    while autoChokeholdEnabled do
        local char = LocalPlayer.Character
        if char then
            local remote = char:FindFirstChild("RemoteForQTE")
            if remote then
                remote:FireServer() -- Fire the remote to complete QTE
            end
        end
        task.wait(0.5) -- Adjust delay if needed
    end
end

MingleGroup:AddToggle("AutoChokeholdToggle", {
    Text = "Auto Chokehold",
    Tooltip = "Automatically completes chokehold QTEs",
    Default = false,
    Callback = function(state)
        autoChokeholdEnabled = state
        if state then
            coroutine.wrap(AutoMingle)()
        end
    end
})

-- Dalgona Section
local DalgonaGroup = MainTab:AddRightGroupbox("Dalgona")

local function CompleteDalgona()
    local DalgonaClientModule = game.ReplicatedStorage.Modules.Games.DalgonaClient

    for _, Value in ipairs(getreg()) do
        if typeof(Value) == "function" and islclosure(Value) then
            if getfenv(Value).script == DalgonaClientModule then
                if debug.getinfo(Value).nups == 73 then
                    setupvalue(Value, 31, 9e9) -- Sets the successful clicks to a huge number
                    break
                end
            end
        end
    end
end

DalgonaGroup:AddButton({
    Text = "Complete Dalgona",
    Func = CompleteDalgona
})

-- Crack Immunity
local dalgonaImmuneEnabled = false
local originalDalgonaHook

local function SetDalgonaImmune(enabled)
    if enabled then
        originalDalgonaHook = hookmetamethod(game, "__namecall", function(self, ...)
            local args = {...}
            if tostring(self) == "DALGONATEMPREMPTE" and type(args[1]) == "table" and args[1].CrackAmount then
                return nil -- Block crack damage
            end
            return originalDalgonaHook(self, ...)
        end)
    elseif originalDalgonaHook then
        hookmetamethod(game, "__namecall", originalDalgonaHook)
        originalDalgonaHook = nil
    end
end

DalgonaGroup:AddToggle("DalgonaImmuneToggle", {
    Text = "Crack Immunity",
    Tooltip = "Prevents your dalgona from cracking",
    Default = false,
    Callback = function(state)
        dalgonaImmuneEnabled = state
        SetDalgonaImmune(state)
    end
})

-- Lights Out Section
local LightsOutGroup = MainTab:AddLeftGroupbox("Lights Out")

local autoKillEnabled = false
local autoKillConnection
local currentTarget = nil

LightsOutGroup:AddToggle("AutoKillToggle", {
    Text = "Auto Kill",
    Tooltip = "Automatically kills players",
    Default = false,
    Callback = function(state)
        autoKillEnabled = state
        if state then
            -- Start auto kill
            autoKillConnection = RunService.Heartbeat:Connect(function()
                pcall(function()
                    local player = Players.LocalPlayer
                    local character = player.Character
                    if not character then return end
                    
                    -- Check backpack for weapons
                    local backpack = player:FindFirstChild("Backpack")
                    local tool = nil
                    
                    if backpack then
                        for _, item in ipairs(backpack:GetChildren()) do
                            if item:IsA("Tool") then
                                local itemName = item.Name:lower()
                                if itemName:find("fork") or itemName:find("bottle") then
                                    tool = item
                                    break
                                end
                            end
                        end
                    end
                    
                    -- Equip tool if found
                    if tool and not character:FindFirstChild(tool.Name) then
                        tool.Parent = character
                    end
                    
                    -- Find a target if none or current target is dead
                    if not currentTarget or not currentTarget.Character or 
                       (currentTarget.Character:FindFirstChildOfClass("Humanoid") and 
                        currentTarget.Character:FindFirstChildOfClass("Humanoid").Health <= 0) then
                        
                        -- Find new target
                        local closestDistance = math.huge
                        for _, target in ipairs(Players:GetPlayers()) do
                            if target ~= player and target.Character and 
                               target.Character:FindFirstChild("HumanoidRootPart") and
                               target.Character:FindFirstChildOfClass("Humanoid") and
                               target.Character:FindFirstChildOfClass("Humanoid").Health > 0 then
                                
                                local distance = (target.Character.HumanoidRootPart.Position - 
                                                character.HumanoidRootPart.Position).Magnitude
                                if distance < closestDistance then
                                    closestDistance = distance
                                    currentTarget = target
                                end
                            end
                        end
                    end
                    
                    -- Attack current target
                    if currentTarget and currentTarget.Character and 
                       currentTarget.Character:FindFirstChild("HumanoidRootPart") then
                        
                        -- Teleport to target
                        character.HumanoidRootPart.CFrame = currentTarget.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, 2)
                        
                        -- Simulate mouse click
                        local VirtualInputManager = game:GetService("VirtualInputManager")
                        local mousePos = Vector2.new(0, 0) -- Position doesn't matter for mouse click
                        
                        -- Mouse down
                        VirtualInputManager:SendMouseButtonEvent(
                            mousePos.X, 
                            mousePos.Y, 
                            0, -- Left mouse button
                            true, -- Down
                            game, 
                            1 -- Click count
                        )
                        
                        -- Small delay between down and up
                        task.wait(0.05)
                        
                        -- Mouse up
                        VirtualInputManager:SendMouseButtonEvent(
                            mousePos.X, 
                            mousePos.Y, 
                            0, -- Left mouse button
                            false, -- Up
                            game, 
                            1 -- Click count
                        )
                        
                        -- Small delay between attacks
                        task.wait(0.2)
                    end
                end)
            end)
        else
            -- Stop auto kill
            if autoKillConnection then
                autoKillConnection:Disconnect()
                autoKillConnection = nil
            end
            currentTarget = nil
        end
    end
})

-- Hide and Seek Section
local HideSeekGroup = MainTab:AddRightGroupbox("Hide and Seek")

-- Infinite Stamina
local infiniteStaminaEnabled = false
local staminaConnection
HideSeekGroup:AddToggle("InfiniteStaminaToggle", {
    Text = "Infinite Stamina",
    Tooltip = "Keeps your stamina at maximum",
    Default = false,
    Callback = function(state)
        infiniteStaminaEnabled = state
        if state then
            -- More efficient stamina update using Heartbeat
            staminaConnection = RunService.Heartbeat:Connect(function()
                pcall(function()
                    -- Check both possible locations for stamina value
                    local playerFolder = workspace.Live:FindFirstChild(LocalPlayer.Name)
                    local staminaVal = playerFolder and playerFolder:WaitForChild("StaminaVal")
                    
                    if not staminaVal then
                        -- Alternative location check
                        local character = LocalPlayer.Character
                        if character then
                            staminaVal = character:WaitForChild("StaminaVal")
                        end
                    end
                    
                    if staminaVal and staminaVal.Value < 100 then
                        staminaVal.Value = 1000
                    end
                end)
            end)
            
            -- Setup for when player respawns
            workspace.Live.ChildAdded:Connect(function(child)
                if child.Name == LocalPlayer.Name then
                    -- Small delay to ensure StaminaVal exists
                    task.wait(0.5)
                    if infiniteStaminaEnabled then
                        local staminaVal = child:WaitForChild("StaminaVal")
                        if staminaVal then
                            staminaVal.Value = 1000
                        end
                    end
                end
            end)
        else
            if staminaConnection then
                staminaConnection:Disconnect()
                staminaConnection = nil
            end
        end
    end
})

-- ESP Hiders
local hiderESPEnabled = false
local hiderHighlights = {}
HideSeekGroup:AddToggle("HiderESPToggle", {
    Text = "ESP Hiders",
    Tooltip = "Highlights hiders in green",
    Default = false,
    Callback = function(state)
        hiderESPEnabled = state
        if state then
            -- Initialize ESP
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer then
                    HiderESP(player)
                end
            end
        else
            -- Clean up hider highlights
            for player, highlight in pairs(hiderHighlights) do
                if highlight then highlight:Destroy() end
            end
            table.clear(hiderHighlights)
        end
    end
})

-- ESP Hunters
local hunterESPEnabled = false
local hunterHighlights = {}
HideSeekGroup:AddToggle("HunterESPToggle", {
    Text = "ESP Hunters",
    Tooltip = "Highlights hunters in red",
    Default = false,
    Callback = function(state)
        hunterESPEnabled = state
        if state then
            -- Initialize ESP
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer then
                    HunterESP(player)
                end
            end
        else
            -- Clean up hunter highlights
            for player, highlight in pairs(hunterHighlights) do
                if highlight then highlight:Destroy() end
            end
            table.clear(hunterHighlights)
        end
    end
})

-- ESP Key
local keyESPEnabled = false
local keyESPConnections = {}
local keyHighlights = {}
HideSeekGroup:AddToggle("KeyESPToggle", {
    Text = "ESP Key",
    Tooltip = "Highlights keys in Hide and Seek",
    Default = false,
    Callback = function(state)
        keyESPEnabled = state
        SetupKeyESP()
    end
})

-- ESP Escape Doors
local escapeDoorESPEnabled = false
local escapeDoorHighlights = {}
HideSeekGroup:AddToggle("EscapeDoorESPToggle", {
    Text = "ESP Escape Doors",
    Tooltip = "Highlights escape doors in Hide and Seek",
    Default = false,
    Callback = function(state)
        escapeDoorESPEnabled = state
        SetupEscapeDoorESP()
    end
})

-- ESP Door and Required Key
local doorESPEnabled = false
HideSeekGroup:AddToggle("DoorESPToggle", {
    Text = "ESP Door and Required Key",
    Tooltip = "Highlights doors and shows required key",
    Default = false,
    Callback = function(state)
        doorESPEnabled = state
        SetupDoorESP()
    end
})

-- Hider Killaura
local killHidersEnabled = false
HideSeekGroup:AddToggle("HiderKillauraToggle", {
    Text = "Hider Killaura",
    Tooltip = "Automatically kills nearby hiders when you're a hunter",
    Default = false,
    Callback = function(state)
        killHidersEnabled = state
        if state then
            coroutine.wrap(KillHiders)()
        end
    end
})

-- Tug of War Section
local TugOfWarGroup = MainTab:AddLeftGroupbox("Tug of War")

-- Auto Pull Rope
local autoPullEnabled = false
local autoPullConnection
TugOfWarGroup:AddToggle("AutoPullToggle", {
    Text = "Auto Pull Rope",
    Tooltip = "Automatically pulls the rope with perfect timing",
    Default = false,
    Callback = function(state)
        autoPullEnabled = state
        if state then
            autoPullConnection = RunService.Heartbeat:Connect(function()
                pcall(function()
                    local remote = game:GetService("ReplicatedStorage"):FindFirstChild("TemporaryReachedBindable")
                    if not remote then return end

                    local args = {
                        {
                            PerfectQTE = true,
                            PerfectTiming = true,
                            Reached = true
                        }
                    }
                    
                    -- Fire the remote with perfect parameters
                    remote:FireServer(unpack(args))
                end)
            end)
        else
            if autoPullConnection then
                autoPullConnection:Disconnect()
                autoPullConnection = nil
            end
        end
    end
})

-- Movement Section
local MovementGroup = MainTab:AddRightGroupbox("Movement")
MovementGroup:AddButton({
    Text = "Unlock Dash",
    Func = function()
        pcall(function()
            local boosts = game:GetService("Players").LocalPlayer:WaitForChild("Boosts")
            if boosts:FindFirstChild("Faster Sprint") then
                boosts["Faster Sprint"].Value = 5
            end
        end)
    end
})

-- Combat Tab
local CombatMainGroup = CombatTab:AddLeftGroupbox("Combat")

CombatMainGroup:AddButton({
    Text = "Kill All",
    Func = function()
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local Humanoid = Character and Character:FindFirstChildOfClass("Humanoid")
        local RootPart = Humanoid and Humanoid.RootPart
        
        if not Character or not Humanoid or not RootPart then return end
        
        local function SkidFling(TargetPlayer)
            local TCharacter = TargetPlayer.Character
            local THumanoid = TCharacter and TCharacter:FindFirstChildOfClass("Humanoid")
            local TRootPart = THumanoid and THumanoid.RootPart
            local THead = TCharacter and TCharacter:FindFirstChild("Head")
            local Accessory = TCharacter and TCharacter:FindFirstChildOfClass("Accessory")
            local Handle = Accessory and Accessory:FindFirstChild("Handle")
            
            if RootPart.Velocity.Magnitude < 50 then
                getgenv().OldPos = RootPart.CFrame
            end
            
            if THead then
                workspace.CurrentCamera.CameraSubject = THead
            elseif not THead and Handle then
                workspace.CurrentCamera.CameraSubject = Handle
            elseif THumanoid and TRootPart then
                workspace.CurrentCamera.CameraSubject = THumanoid
            end
            
            if not TCharacter:FindFirstChildWhichIsA("BasePart") then
                return
            end
            
            local FPos = function(BasePart, Pos, Ang)
                RootPart.CFrame = CFrame.new(BasePart.Position) * Pos * Ang
                Character:SetPrimaryPartCFrame(CFrame.new(BasePart.Position) * Pos * Ang)
                RootPart.Velocity = Vector3.new(9e7, 9e7 * 10, 9e7)
                RootPart.RotVelocity = Vector3.new(9e8, 9e8, 9e8)
            end
            
            local SFBasePart = function(BasePart)
                local TimeToWait = 2
                local Time = tick()
                local Angle = 0

                repeat
                    if RootPart and THumanoid then
                        if BasePart.Velocity.Magnitude < 50 then
                            Angle = Angle + 100

                            FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle),0 ,0))
                            task.wait()

                            FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                            task.wait()

                            FPos(BasePart, CFrame.new(2.25, 1.5, -2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                            task.wait()

                            FPos(BasePart, CFrame.new(-2.25, -1.5, 2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                            task.wait()

                            FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection,CFrame.Angles(math.rad(Angle), 0, 0))
                            task.wait()

                            FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection,CFrame.Angles(math.rad(Angle), 0, 0))
                            task.wait()
                        else
                            FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
                            task.wait()

                            FPos(BasePart, CFrame.new(0, -1.5, -THumanoid.WalkSpeed), CFrame.Angles(0, 0, 0))
                            task.wait()

                            FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
                            task.wait()
                            
                            FPos(BasePart, CFrame.new(0, 1.5, TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(math.rad(90), 0, 0))
                            task.wait()

                            FPos(BasePart, CFrame.new(0, -1.5, -TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(0, 0, 0))
                            task.wait()

                            FPos(BasePart, CFrame.new(0, 1.5, TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(math.rad(90), 0, 0))
                            task.wait()

                            FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(math.rad(90), 0, 0))
                            task.wait()

                            FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
                            task.wait()

                            FPos(BasePart, CFrame.new(0, -1.5 ,0), CFrame.Angles(math.rad(-90), 0, 0))
                            task.wait()

                            FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
                            task.wait()
                        end
                    else
                        break
                    end
                until BasePart.Velocity.Magnitude > 500 or BasePart.Parent ~= TargetPlayer.Character or TargetPlayer.Parent ~= Players or not TargetPlayer.Character == TCharacter or THumanoid.Sit or Humanoid.Health <= 0 or tick() > Time + TimeToWait
            end
            
            workspace.FallenPartsDestroyHeight = 0/0
            
            local BV = Instance.new("BodyVelocity")
            BV.Name = "EpixVel"
            BV.Parent = RootPart
            BV.Velocity = Vector3.new(9e8, 9e8, 9e8)
            BV.MaxForce = Vector3.new(1/0, 1/0, 1/0)
            
            Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
            
            if TRootPart and THead then
                if (TRootPart.CFrame.p - THead.CFrame.p).Magnitude > 5 then
                    SFBasePart(THead)
                else
                    SFBasePart(TRootPart)
                end
            elseif TRootPart and not THead then
                SFBasePart(TRootPart)
            elseif not TRootPart and THead then
                SFBasePart(THead)
            elseif not TRootPart and not THead and Accessory and Handle then
                SFBasePart(Handle)
            end
            
            BV:Destroy()
            Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
            workspace.CurrentCamera.CameraSubject = Humanoid
            
            repeat
                RootPart.CFrame = getgenv().OldPos * CFrame.new(0, .5, 0)
                Character:SetPrimaryPartCFrame(getgenv().OldPos * CFrame.new(0, .5, 0))
                Humanoid:ChangeState("GettingUp")
                table.foreach(Character:GetChildren(), function(_, x)
                    if x:IsA("BasePart") then
                        x.Velocity, x.RotVelocity = Vector3.new(), Vector3.new()
                    end
                end)
                task.wait()
            until (RootPart.Position - getgenv().OldPos.p).Magnitude < 25
            workspace.FallenPartsDestroyHeight = getgenv().FPDH
        end
        
        -- Flings all players except yourself
        for _, target in ipairs(Players:GetPlayers()) do
            if target ~= Player and target.Character then
                SkidFling(target)
            end
        end
    end
})

-- Guard Aimbot
local guardAimbotEnabled = false
local guardAimbotCleanup
CombatMainGroup:AddToggle("GuardAimbotToggle", {
    Text = "Guard Aimbot",
    Tooltip = "Automatically aims at the nearest guard",
    Default = false,
    Callback = function(state)
        guardAimbotEnabled = state
        if state then
            local connection
            connection = RunService.RenderStepped:Connect(function()
                local guard = GetNearestGuard()
                if not guard then return end
                
                -- Smooth aiming
                local camPos = Camera.CFrame.Position
                local lookVector = (guard.Position - camPos).Unit
                Camera.CFrame = Camera.CFrame:Lerp(CFrame.new(camPos, camPos + lookVector), 0.2)
            end)
            
            guardAimbotCleanup = function()
                connection:Disconnect()
            end
        elseif guardAimbotCleanup then
            guardAimbotCleanup()
            guardAimbotCleanup = nil
        end
    end
})

-- Bring Guards
local bringGuardsEnabled = false
local bringGuardsConnection
CombatMainGroup:AddToggle("BringGuardsToggle", {
    Text = "Bring Guards",
    Tooltip = "Brings Guards to your position",
    Default = false,
    Callback = function(state)
        bringGuardsEnabled = state
        if state then
            local lastUpdate = tick()
            bringGuardsConnection = RunService.Heartbeat:Connect(function()
                -- Add a 0.3 second delay between executions
                if tick() - lastUpdate >= 0.3 then
                    lastUpdate = tick()
                    pcall(function()
                        local player = game:GetService("Players").LocalPlayer
                        local character = player.Character
                        local hrp = character and character:FindFirstChild("HumanoidRootPart")
                        
                        if hrp then
                            local offset = hrp.CFrame.lookVector * 5
                            local targetPosition = hrp.Position + offset + Vector3.new(0, 3, 0)
                            
                            for _, obj in ipairs(workspace:GetDescendants()) do
                                if obj:IsA("Model") then
                                    local modelName = obj.Name:lower()
                                    if modelName:find("triangle") or modelName:find("squid") or modelName:find("circle") or modelName:find("guard") then
                                        local guardHrp = obj:FindFirstChild("HumanoidRootPart")
                                        local humanoid = obj:FindFirstChildOfClass("Humanoid")
                                        
                                        if guardHrp and humanoid and humanoid.Health > 0 then
                                            guardHrp.CFrame = guardHrp.CFrame:Lerp(CFrame.new(targetPosition), 0.1)
                                        end
                                    end
                                end
                            end
                        end
                    end)
                end
            end)
        else
            if bringGuardsConnection then
                bringGuardsConnection:Disconnect()
                bringGuardsConnection = nil
            end
        end
    end
})

-- MP5 Mods
CombatMainGroup:AddToggle("MP5ModsToggle", {
    Text = "MP5 Mods",
    Tooltip = "Improved bullets, reduced spread, faster fire",
    Default = false,
    Callback = function(state)
        local MP5 = game:GetService("ReplicatedStorage").Weapons.Guns:FindFirstChild("MP5")
        if MP5 then
            if state then
                if MP5:FindFirstChild("MaxBullets") then MP5.MaxBullets.Value = 5000 end
                if MP5:FindFirstChild("Spread") then MP5.Spread.Value = 0 end
                if MP5:FindFirstChild("BulletsPerFire") then MP5.BulletsPerFire.Value = 3 end
                if MP5:FindFirstChild("FireRateCD") then MP5.FireRateCD.Value = 0 end
            else
                if MP5:FindFirstChild("MaxBullets") then MP5.MaxBullets.Value = 30 end
                if MP5:FindFirstChild("Spread") then MP5.Spread.Value = 0.1 end
                if MP5:FindFirstChild("BulletsPerFire") then MP5.BulletsPerFire.Value = 1 end
                if MP5:FindFirstChild("FireRateCD") then MP5.FireRateCD.Value = 0.1 end
            end
        end
    end
})

-- Kill Aura
local killAuraEnabled = false
local killAuraConnection
CombatMainGroup:AddToggle("KillAuraToggle", {
    Text = "Kill Aura",
    Tooltip = "Automatically attacks nearby enemies (supports Bottle,Fork,Knife,Power Hold)",
    Default = false,
    Callback = function(state)
        killAuraEnabled = state
        if state then
            killAuraConnection = RunService.Heartbeat:Connect(function()
                pcall(ExecuteKillaura)
            end)
        else
            if killAuraConnection then
                killAuraConnection:Disconnect()
                killAuraConnection = nil
            end
        end
    end
})

-- Hitbox Expander
local HitboxGroup = CombatTab:AddRightGroupbox("Hitbox Expander")

local hitboxEnabled = false
local hitboxSize = 5 -- Default size multiplier
local hitboxTransparency = 0.7
local hitboxColor = Color3.fromRGB(255, 0, 0)
local hitboxConnections = {}
local hitboxParts = {}

HitboxGroup:AddToggle("HitboxToggle", {
    Text = "Guard Hitbox Expander",
    Tooltip = "Makes guards easier to hit by expanding their hitbox",
    Default = false,
    Callback = function(state)
        hitboxEnabled = state
        setupHitboxes()
    end
})

HitboxGroup:AddSlider("HitboxSizeSlider", {
    Text = "Guard Hitbox Size",
    Default = 5,
    Min = 1,
    Max = 20,
    Rounding = 1,
    Callback = function(value)
        hitboxSize = value
        if hitboxEnabled then
            for guard, hitbox in pairs(hitboxParts) do
                if hitbox and hitbox.Parent then
                    hitbox.Size = Vector3.new(hitboxSize, hitboxSize, hitboxSize)
                end
            end
        end
    end
})

HitboxGroup:AddSlider("HitboxTransparencySlider", {
    Text = "Guard Hitbox Transparency",
    Default = 0.7,
    Min = 0,
    Max = 1,
    Rounding = 2,
    Callback = function(value)
        hitboxTransparency = value
        if hitboxEnabled then
            for guard, hitbox in pairs(hitboxParts) do
                if hitbox and hitbox.Parent then
                    hitbox.Transparency = hitboxTransparency
                end
            end
        end
    end
})

-- Color picker
HitboxGroup:AddLabel("Guard Hitbox Color"):AddColorPicker("HitboxColorPicker", {
    Default = Color3.fromRGB(255, 0, 0),
    Title = "Hitbox Color",
    Callback = function(color)
        hitboxColor = color
        if hitboxEnabled then
            -- Update all existing hitboxes
            for guard, hitbox in pairs(hitboxParts) do
                if hitbox and hitbox.Parent then
                    hitbox.Color = hitboxColor
                end
            end
        end
    end
})

-- Utility Tab
local PowerGroup = UtilityTab:AddLeftGroupbox("Power")
PowerGroup:AddButton({
    Text = "Change to Phantom Step",
    Func = function()
        pcall(function()
            local player = game:GetService("Players").LocalPlayer
            player:SetAttribute("_EquippedPower", "PHANTOM STEP")
            Library:Notify("Phantom Step equipped", 3)
        end)
    end
})

local UtilitiesGroup = UtilityTab:AddRightGroupbox("Utilities")

-- Change Number Tag
local DESIRED_TAG = 123
UtilitiesGroup:AddInput("TagInput", {
    Text = "Change Number Tag",
    Tooltip = "Enter desired tag number (1-456)",
    Default = "123",
    Numeric = true,
    Finished = false,
    Callback = function(value)
        DESIRED_TAG = tonumber(value) or 123
    end
})

UtilitiesGroup:AddButton({
    Text = "Apply Number Tag",
    Func = function()
        if game.PlaceId == 125009265613167 then return end

        -- SERVICES
        local Players = game:GetService("Players")
        local ReplicatedStorage = game:GetService("ReplicatedStorage")

        -- SETUP
        local localPlayer = Players.LocalPlayer or Players.PlayerAdded:Wait()
        local clickedButtonRemote = ReplicatedStorage.Remotes.ClickedButton
        local args = {{buttonname = "leave"}}

        -- CONFIG (using the same CFrame you provided)
        local TARGET_CFRAME = CFrame.new(210.02560424804688, 55.94557189941406, -20.839000701904297)

        -- OPTIMIZED FUNCTIONS
        local function hasDesiredTag()
            local tag = localPlayer:FindFirstChild("PlayerTagValue")
            return tag and tag.Value == DESIRED_TAG
        end

        local function attemptTagChange()
            local character = localPlayer.Character
            if not character then return false end
            
            local humanoid = character:FindFirstChild("Humanoid")
            if not humanoid then return false end
            
            -- Execute all actions in one frame with no delays
            character:PivotTo(TARGET_CFRAME)
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            clickedButtonRemote:FireServer(unpack(args))
            
            return hasDesiredTag()
        end

        -- Create a connection only if one doesn't exist
        if not getgenv().tagChangeConnection then
            getgenv().tagChangeConnection = RunService.Heartbeat:Connect(function()
                if not hasDesiredTag() then
                    attemptTagChange()
                else
                    -- Disconnect when we get the desired tag
                    if getgenv().tagChangeConnection then
                        getgenv().tagChangeConnection:Disconnect()
                        getgenv().tagChangeConnection = nil
                    end
                end
            end)
        end

        -- Initial immediate attempt
        attemptTagChange()
        Library:Notify("Attempting to set tag to "..DESIRED_TAG, 3)
    end
})

-- Auto Skip Cutscenes
UtilitiesGroup:AddToggle("SkipCutscenesToggle", {
    Text = "Auto Skip Cutscenes",
    Tooltip = "Automatically skips all cutscenes and dialogue",
    Default = false,
    Callback = function(state)
        if state then
            getgenv().skipCutsceneConnection = RunService.Heartbeat:Connect(function()
                local args = {"Skipped"}
                pcall(function()
                    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("DialogueRemote"):FireServer(unpack(args))
                end)
            end)
        else
            if getgenv().skipCutsceneConnection then
                getgenv().skipCutsceneConnection:Disconnect()
                getgenv().skipCutsceneConnection = nil
            end
        end
    end
})

-- Misc Tab
local SafeGroup = MiscTab:AddLeftGroupbox("Safe")

local lastPosition = nil
local safeZoneFolder = nil
SafeGroup:AddButton({
    Text = "Teleport to SafeZone",
    Func = function()
        local character = LocalPlayer.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            lastPosition = character.HumanoidRootPart.CFrame
            local safeZonePos = createSafeZone()
            character.HumanoidRootPart.CFrame = CFrame.new(safeZonePos)
            Library:Notify("Teleported to SafeZone", 3)
        end
    end
})

SafeGroup:AddButton({
    Text = "Teleport Back",
    Func = function()
        local character = LocalPlayer.Character
        if character and character:FindFirstChild("HumanoidRootPart") and lastPosition then
            character.HumanoidRootPart.CFrame = lastPosition
            if safeZoneFolder then
                safeZoneFolder:Destroy()
                safeZoneFolder = nil
            end
            Library:Notify("Teleported back", 3)
        end
    end
})

-- Character Modifications
local CharModGroup = MiscTab:AddRightGroupbox("Character Modifications")

-- Disable Injuries
local disableInjuriesEnabled = false
local injuriesConnection
CharModGroup:AddToggle("DisableInjuriesToggle", {
    Text = "Disable Injuries",
    Tooltip = "Removes injured walking",
    Default = false,
    Callback = function(state)
        disableInjuriesEnabled = state
        if state then
            injuriesConnection = RunService.Heartbeat:Connect(function()
                pcall(function()
                    -- Add small delay between checks
                    task.wait(0.3)
                    
                    local player = Players.LocalPlayer
                    local character = workspace.Live:FindFirstChild(player.Name)
                    if character then
                        local injuredWalking = character:FindFirstChild("InjuredWalking")
                        if injuredWalking then
                            injuredWalking:Destroy()
                        end
                    end
                end)
            end)
        else
            if injuriesConnection then
                injuriesConnection:Disconnect()
                injuriesConnection = nil
            end
        end
    end
})

-- Disable Stun/Slow
local disableStunEnabled = false
local stunConnection
CharModGroup:AddToggle("DisableStunToggle", {
    Text = "Disable Stun/Slow",
    Tooltip = "Removes stun and slow effects",
    Default = false,
    Callback = function(state)
        disableStunEnabled = state
        if state then
            stunConnection = RunService.Heartbeat:Connect(function()
                pcall(function()
                    -- Add small delay between checks
                    task.wait(0.3)
                    
                    local player = Players.LocalPlayer
                    local character = workspace.Live:FindFirstChild(player.Name)
                    if character then
                        for _, descendant in pairs(character:GetDescendants()) do
                            if string.find(string.lower(descendant.Name), "stun") then
                                descendant:Destroy()
                            end
                        end
                    end
                end)
            end)
            
            -- Also check when character is added
            Players.LocalPlayer.CharacterAdded:Connect(function(character)
                if disableStunEnabled then
                    task.wait(1) -- Wait for character to fully load
                    for _, descendant in pairs(character:GetDescendants()) do
                        if string.find(string.lower(descendant.Name), "stun") then
                            descendant:Destroy()
                        end
                    end
                end
            end)
        else
            if stunConnection then
                stunConnection:Disconnect()
                stunConnection = nil
            end
        end
    end
})

-- Walk Speed
local currentWalkSpeed = 16
CharModGroup:AddSlider("WalkSpeedSlider", {
    Text = "Walk Speed",
    Default = 16,
    Min = 16,
    Max = 100,
    Rounding = 1,
    Callback = function(value)
        currentWalkSpeed = value
        local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = value
        end
    end
})

-- Jump Power
CharModGroup:AddSlider("JumpPowerSlider", {
    Text = "Jump Power",
    Default = 50,
    Min = 50,
    Max = 200,
    Rounding = 1,
    Callback = function(value)
        local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.JumpPower = value
        end
    end
})

-- Anti AFK
local antiAFKEnabled = false
local antiAFKConnection
CharModGroup:AddToggle("AntiAFKToggle", {
    Text = "Anti AFK",
    Tooltip = "Prevents you from being kicked for inactivity",
    Default = false,
    Callback = function(state)
        antiAFKEnabled = state
        if state then
            -- Simulate activity by moving the mouse slightly
            antiAFKConnection = RunService.Heartbeat:Connect(function()
                pcall(function()
                    -- Move mouse slightly every 30 seconds to prevent AFK
                    if tick() % 30 < 0.1 then
                        local VirtualInputManager = game:GetService("VirtualInputManager")
                        VirtualInputManager:SendMouseMoveEvent(1, 1, game:GetService("Players").LocalPlayer.PlayerGui)
                    end
                    
                    -- Alternative method using VirtualUser
                    local VirtualUser = game:GetService("VirtualUser")
                    VirtualUser:CaptureController()
                    VirtualUser:SetKeyDown("0x01") -- Left mouse button
                    VirtualUser:SetKeyUp("0x01")
                end)
            end)
            
            -- Also connect to the game's idle event
            Players.LocalPlayer.Idled:Connect(function()
                if antiAFKEnabled then
                    game:GetService("VirtualUser"):Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
                    task.wait(1)
                    game:GetService("VirtualUser"):Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
                end
            end)
        else
            if antiAFKConnection then
                antiAFKConnection:Disconnect()
                antiAFKConnection = nil
            end
        end
    end
})

-- NoClip
local noclipEnabled = false
local noclipConnection
CharModGroup:AddToggle("NoClipToggle", {
    Text = "NoClip",
    Tooltip = "Walk through walls and objects",
    Default = false,
    Callback = function(state)
        noclipEnabled = state
        if state then
            -- Enable NoClip
            noclipConnection = RunService.Stepped:Connect(noclipLoop)
            
            -- Handle character respawns
            LocalPlayer.CharacterAdded:Connect(function(char)
                task.wait(0.5) -- Wait for character to fully load
                if noclipEnabled then
                    noclipLoop()
                end
            end)
        else
            -- Disable NoClip
            if noclipConnection then
                noclipConnection:Disconnect()
                noclipConnection = nil
            end
            
            -- Restore collision if character exists
            if LocalPlayer.Character then
                for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                    end
                end
            end
        end
    end
})

-- Visual Tab
local ESPGroup = VisualTab:AddLeftGroupbox("ESP")

-- ESP Players
local playerESPEnabled = false
ESPGroup:AddToggle("PlayerESPToggle", {
    Text = "ESP Players",
    Tooltip = "Highlights all players with health display",
    Default = false,
    Callback = function(state)
        playerESPEnabled = state
        SetupPlayerESP()
    end
})

-- ESP Guards
local guardESPEnabled = false
ESPGroup:AddToggle("GuardESPToggle", {
    Text = "ESP Guards",
    Tooltip = "Highlights all guards in the game",
    Default = false,
    Callback = function(state)
        guardESPEnabled = state
        SetupGuardESP()
    end
})

-- UI Settings
local MenuGroup = Window.Tabs["UI Settings"]:AddLeftGroupbox("Menu")

MenuGroup:AddToggle("KeybindMenuToggle", {
    Text = "Open Keybind Menu",
    Default = false,
    Callback = function(value)
        Library.KeybindFrame.Visible = value
    end,
})

MenuGroup:AddToggle("CustomCursorToggle", {
    Text = "Custom Cursor",
    Default = true,
    Callback = function(Value)
        Library.ShowCustomCursor = Value
    end,
})

MenuGroup:AddDropdown("NotificationSideDropdown", {
    Values = { "Left", "Right" },
    Default = "Right",
    Text = "Notification Side",
    Callback = function(Value)
        Library:SetNotifySide(Value)
    end,
})

MenuGroup:AddDropdown("DPIDropdown", {
    Values = { "50%", "75%", "100%", "125%", "150%", "175%", "200%" },
    Default = "100%",
    Text = "DPI Scale",
    Callback = function(Value)
        Value = Value:gsub("%%", "")
        local DPI = tonumber(Value)
        Library:SetDPIScale(DPI / 100)
    end,
})

MenuGroup:AddDivider()
MenuGroup:AddLabel("Menu bind"):AddKeyPicker("MenuKeybind", { 
    Default = "RightShift", 
    NoUI = true, 
    Text = "Menu keybind" 
})

MenuGroup:AddButton("Unload", function()
    Library:Unload()
end)

-- Set the keybind to toggle the menu
Library.ToggleKeybind = Options.MenuKeybind

-- Hand the library over to our managers
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

-- Ignore keys that are used by ThemeManager.
SaveManager:IgnoreThemeSettings()

-- Adds our MenuKeybind to the ignore list
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })

-- Set the folders
ThemeManager:SetFolder("InkGameAgsy")
SaveManager:SetFolder("InkGameAgsy/settings")

-- Build our config menu on the right side of our tab
SaveManager:BuildConfigSection(Window.Tabs["UI Settings"])

-- Build our theme menu
ThemeManager:ApplyToTab(Window.Tabs["UI Settings"])

-- Load the config
SaveManager:LoadAutoloadConfig()

-- Helper functions (place these at the bottom of your script)

local function noclipLoop()
    if noclipEnabled and LocalPlayer.Character then
        for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") and part.CanCollide then
                part.CanCollide = false
            end
        end
    end
end

local function createSafeZone()
    -- Delete existing safezone if it exists
    if safeZoneFolder then
        safeZoneFolder:Destroy()
    end
    
    -- Create new safezone folder
    safeZoneFolder = Instance.new("Folder", workspace)
    safeZoneFolder.Name = "SAFEZONEMAP"
    
    -- Create main platform (thicker to prevent glitching)
    local platform = Instance.new("Part", safeZoneFolder)
    platform.Name = "SafePlatform"
    platform.Size = Vector3.new(100, 5, 100) -- Thicker (5 studs tall)
    platform.Position = Vector3.new(0, 5000, 0) -- Still far away
    platform.Anchored = true
    platform.CanCollide = true
    platform.Material = Enum.Material.Slate
    platform.Color = Color3.fromRGB(150, 150, 150)
    
    -- Add protective wooden walls around the edges
    local wallHeight = 20
    local wallThickness = 2
    
    -- North wall
    local northWall = Instance.new("Part", safeZoneFolder)
    northWall.Size = Vector3.new(100 + wallThickness*2, wallHeight, wallThickness)
    northWall.Position = platform.Position + Vector3.new(0, wallHeight/2, 50 + wallThickness/2)
    northWall.Anchored = true
    northWall.CanCollide = true
    northWall.Material = Enum.Material.WoodPlanks
    northWall.Color = Color3.fromRGB(102, 70, 42)
    
    -- South wall
    local southWall = northWall:Clone()
    southWall.Parent = safeZoneFolder
    southWall.Position = platform.Position + Vector3.new(0, wallHeight/2, -50 - wallThickness/2)
    
    -- East wall
    local eastWall = Instance.new("Part", safeZoneFolder)
    eastWall.Size = Vector3.new(wallThickness, wallHeight, 100)
    eastWall.Position = platform.Position + Vector3.new(50 + wallThickness/2, wallHeight/2, 0)
    eastWall.Anchored = true
    eastWall.CanCollide = true
    eastWall.Material = Enum.Material.WoodPlanks
    eastWall.Color = northWall.Color
    eastWall.Parent = safeZoneFolder
    
    -- West wall
    local westWall = eastWall:Clone()
    westWall.Parent = safeZoneFolder
    westWall.Position = platform.Position + Vector3.new(-50 - wallThickness/2, wallHeight/2, 0)
    
    -- Add wooden border (decorative)
    local border = Instance.new("Part", safeZoneFolder)
    border.Size = Vector3.new(104, 1, 104)
    border.Position = platform.Position + Vector3.new(0, 2.5, 0)
    border.Anchored = true
    border.CanCollide = true
    border.Material = Enum.Material.WoodPlanks
    border.Color = Color3.fromRGB(102, 70, 42)
    
    -- Add some grass patches (on top of the platform)
    local grassColors = {
        Color3.fromRGB(34, 139, 34),
        Color3.fromRGB(0, 100, 0),
        Color3.fromRGB(50, 205, 50)
    }
    
    for i = 1, 15 do
        local grassPatch = Instance.new("Part", safeZoneFolder)
        grassPatch.Size = Vector3.new(math.random(8, 15), 0.5, math.random(8, 15))
        grassPatch.Position = platform.Position + Vector3.new(
            math.random(-40, 40),
            2.6, -- On top of platform
            math.random(-40, 40)
        )
        grassPatch.Anchored = true
        grassPatch.CanCollide = false
        grassPatch.Material = Enum.Material.Grass
        grassPatch.Color = grassColors[math.random(1, #grassColors)]
        
        -- Add some small rocks
        if math.random() > 0.7 then
            local rock = Instance.new("Part", safeZoneFolder)
            rock.Size = Vector3.new(math.random(2, 4), math.random(1, 2), math.random(2, 4))
            rock.Position = grassPatch.Position + Vector3.new(0, 0.5, 0)
            rock.Anchored = true
            rock.CanCollide = true
            rock.Material = Enum.Material.Slate
            rock.Color = Color3.fromRGB(100, 100, 100)
        end
    end
    
    -- Add a cozy chair
    local chair = Instance.new("Part", safeZoneFolder)
    chair.Name = "Chair"
    chair.Size = Vector3.new(4, 3, 4)
    chair.Position = platform.Position + Vector3.new(20, 2.5, 0)
    chair.Anchored = true
    chair.CanCollide = true
    chair.Material = Enum.Material.Wood
    chair.Color = Color3.fromRGB(139, 69, 19) -- Brown
    
    -- Chair backrest
    local backrest = Instance.new("Part", safeZoneFolder)
    backrest.Size = Vector3.new(4, 6, 0.5)
    backrest.Position = chair.Position + Vector3.new(0, 3, -2)
    backrest.Anchored = true
    backrest.CanCollide = true
    backrest.Material = Enum.Material.Wood
    backrest.Color = chair.Color
    
    -- Add some trees
    for i = 1, 4 do
        local treePos = platform.Position + Vector3.new(
            math.random(-35, 35),
            0,
            math.random(-35, 35)
        )
        
        -- Tree trunk
        local trunk = Instance.new("Part", safeZoneFolder)
        trunk.Size = Vector3.new(3, 10, 3)
        trunk.Position = treePos + Vector3.new(0, 5, 0)
        trunk.Anchored = true
        trunk.CanCollide = true
        trunk.Material = Enum.Material.Wood
        trunk.Color = Color3.fromRGB(101, 67, 33)
        
        -- Tree leaves
        local leaves = Instance.new("Part", safeZoneFolder)
        leaves.Size = Vector3.new(12, 8, 12)
        leaves.Position = trunk.Position + Vector3.new(0, 8, 0)
        leaves.Anchored = true
        leaves.CanCollide = true
        leaves.Material = Enum.Material.Sand
        leaves.Color = Color3.fromRGB(34, 139, 34)
        leaves.Shape = Enum.PartType.Ball
    end
    
    -- Add a campfire
    local fireBase = Instance.new("Part", safeZoneFolder)
    fireBase.Size = Vector3.new(6, 1, 6)
    fireBase.Position = platform.Position + Vector3.new(-20, 2.6, 0)
    fireBase.Anchored = true
    fireBase.CanCollide = true
    fireBase.Material = Enum.Material.Slate
    fireBase.Color = Color3.fromRGB(80, 80, 80)
    
    -- Actual fire effect
    local fire = Instance.new("Fire", fireBase)
    fire.Heat = 10
    fire.Size = 5
    fire.Color = Color3.new(1, 0.5, 0.1)
    fire.SecondaryColor = Color3.new(1, 0.8, 0)
    
    -- Add subtle lighting
    local light = Instance.new("PointLight", fireBase)
    light.Brightness = 5
    light.Range = 20
    light.Color = Color3.new(1, 0.6, 0.3)
    
    -- Spawn position (near the chair, above platform)
    return platform.Position + Vector3.new(20, 7, 0)
end

local function HiderESP(player)
    if player:GetAttribute("IsHider") and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        -- Clear existing highlight if any
        if hiderHighlights[player] then
            hiderHighlights[player]:Destroy()
            hiderHighlights[player] = nil
        end

        if not hiderESPEnabled then return end

        local highlight = Instance.new("Highlight")
        highlight.Adornee = player.Character
        highlight.FillColor = Color3.fromRGB(0, 255, 0) -- Green for hiders
        highlight.OutlineColor = Color3.new(1, 1, 1)
        highlight.FillTransparency = 0.5
        highlight.Parent = player.Character
        hiderHighlights[player] = highlight

        -- Cleanup when player is no longer a hider
        player:GetAttributeChangedSignal("IsHider"):Connect(function()
            if hiderHighlights[player] then 
                hiderHighlights[player]:Destroy()
                hiderHighlights[player] = nil
            end
        end)
    end
end

local function HunterESP(player)
    if player:GetAttribute("IsHunter") and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        -- Clear existing highlight if any
        if hunterHighlights[player] then
            hunterHighlights[player]:Destroy()
            hunterHighlights[player] = nil
        end

        if not hunterESPEnabled then return end

        local highlight = Instance.new("Highlight")
        highlight.Adornee = player.Character
        highlight.FillColor = Color3.fromRGB(255, 0, 0) -- Red for hunters
        highlight.OutlineColor = Color3.new(1, 1, 1)
        highlight.FillTransparency = 0.5
        highlight.Parent = player.Character
        hunterHighlights[player] = highlight

        -- Cleanup when player is no longer a hunter
        player:GetAttributeChangedSignal("IsHunter"):Connect(function()
            if hunterHighlights[player] then 
                hunterHighlights[player]:Destroy()
                hunterHighlights[player] = nil
            end
        end)
    end
end

local function KeyESP(keyModel)
    if not keyModel or not keyModel:IsA("Model") or not keyModel.PrimaryPart then
        return
    end

    -- Create Highlight for the key
    local highlight = Instance.new("Highlight")
    highlight.Name = "KeyESP"
    highlight.Adornee = keyModel
    highlight.FillColor = Color3.fromRGB(255, 255, 0)  -- Yellow color for keys
    highlight.OutlineColor = Color3.fromRGB(255, 215, 0) -- Gold outline
    highlight.FillTransparency = 0.3
    highlight.OutlineTransparency = 0
    highlight.Parent = keyModel
    keyHighlights[keyModel] = highlight

    -- Clean up if the key is destroyed or removed
    local connection
    connection = keyModel.AncestryChanged:Connect(function(_, parent)
        if not parent or not keyModel:IsDescendantOf(game) then
            if highlight and highlight.Parent then
                highlight:Destroy()
            end
            if connection then
                connection:Disconnect()
            end
            keyHighlights[keyModel] = nil
        end
    end)

    keyESPConnections[keyModel] = connection
end

local function SetupKeyESP()
    -- Clear existing highlights and connections
    for key, highlight in pairs(keyHighlights) do
        if highlight and highlight.Parent then
            highlight:Destroy()
        end
    end
    table.clear(keyHighlights)
    
    for key, conn in pairs(keyESPConnections) do
        if conn then
            conn:Disconnect()
        end
    end
    table.clear(keyESPConnections)

    if not keyESPEnabled then return end

    -- Scan existing keys in workspace
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj.Name:lower():find("key") and obj:IsA("Model") then
            KeyESP(obj)
        end
    end

    -- Listen for new keys
    keyESPConnections.descendantAdded = workspace.DescendantAdded:Connect(function(obj)
        if obj.Name:lower():find("key") and obj:IsA("Model") then
            KeyESP(obj)
        end
    end)
end

local function EscapeDoorESP(door)
    -- Validate the door object
    if not door or not door:IsA("Model") then return end
    if not door.PrimaryPart then return end
    
    -- Check if this door already has ESP
    if escapeDoorHighlights[door] then return end

    -- Create visual elements
    local highlight = Instance.new("Highlight")
    highlight.Adornee = door
    highlight.FillColor = Color3.fromRGB(0, 255, 0)  -- Green for escape
    highlight.OutlineColor = Color3.fromRGB(0, 200, 0)
    highlight.FillTransparency = 0.4
    highlight.OutlineTransparency = 0
    highlight.Parent = door
    escapeDoorHighlights[door] = highlight

    -- Add a floating text label
    local billboard = Instance.new("BillboardGui")
    billboard.Adornee = door.PrimaryPart
    billboard.Size = UDim2.new(0, 100, 0, 40)
    billboard.StudsOffset = Vector3.new(0, 3, 0)
    billboard.AlwaysOnTop = true

    local label = Instance.new("TextLabel")
    label.Text = "ESCAPE DOOR"
    label.TextColor3 = Color3.fromRGB(0, 255, 0)
    label.TextSize = 14
    label.Font = Enum.Font.Oswald
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.Parent = billboard
    billboard.Parent = door
    escapeDoorBillboards[door] = billboard

    -- Cleanup function
    local function cleanup()
        if highlight and highlight.Parent then
            highlight:Destroy()
        end
        if billboard and billboard.Parent then
            billboard:Destroy()
        end
        escapeDoorHighlights[door] = nil
        escapeDoorBillboards[door] = nil
    end

    -- Auto-cleanup when door is removed
    escapeDoorConnections[door] = door.AncestryChanged:Connect(function(_, parent)
        if not parent then cleanup() end
    end)
end

local function SetupEscapeDoorESP()
    -- Clear existing ESP
    for door, highlight in pairs(escapeDoorHighlights) do
        if highlight and highlight.Parent then
            highlight:Destroy()
        end
    end
    table.clear(escapeDoorHighlights)
    
    for door, billboard in pairs(escapeDoorBillboards) do
        if billboard and billboard.Parent then
            billboard:Destroy()
        end
    end
    table.clear(escapeDoorBillboards)
    
    for door, conn in pairs(escapeDoorConnections) do
        if conn then
            conn:Disconnect()
        end
    end
    table.clear(escapeDoorConnections)

    if not escapeDoorESPEnabled then return end

    -- Check existing doors
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj.Name == "EXITDOOR" then
            EscapeDoorESP(obj)
        end
    end

    -- Monitor for new doors
    escapeDoorConnections.descendantAdded = workspace.DescendantAdded:Connect(function(obj)
        if obj.Name == "EXITDOOR" then
            EscapeDoorESP(obj)
        end
    end)
end

local function DoorESP(door)
    if not door:IsA("Model") or not door.PrimaryPart then return end
    
    -- Only target door models (adjust names as needed)
    if not (door.Name:find("Door") or door.Name:find("door")) then return end

    -- Clear existing ESP if any
    if doorHighlights[door] then
        doorHighlights[door]:Destroy()
        doorHighlights[door] = nil
    end
    if doorBillboards[door] then
        doorBillboards[door]:Destroy()
        doorBillboards[door] = nil
    end

    if not doorESPEnabled then return end

    local highlight = Instance.new("Highlight")
    highlight.Name = "DoorESP"
    highlight.Adornee = door
    highlight.FillColor = Color3.fromRGB(255, 165, 0)  -- Orange
    highlight.OutlineColor = Color3.fromRGB(255, 100, 0)
    highlight.FillTransparency = 0.6
    highlight.Parent = door
    doorHighlights[door] = highlight

    -- Show required key if available
    local keyNeeded = door:GetAttribute("KeyNeeded") or "Unknown"
    local billboard = Instance.new("BillboardGui")
    billboard.Adornee = door.PrimaryPart
    billboard.Size = UDim2.new(0, 150, 0, 40)
    billboard.StudsOffset = Vector3.new(0, 3, 0)
    billboard.AlwaysOnTop = true

    local label = Instance.new("TextLabel")
    label.Text = "DOOR (Key: "..keyNeeded..")"
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextSize = 14
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(1, 0, 1, 0)
    label.Parent = billboard
    billboard.Parent = door
    doorBillboards[door] = billboard

    -- Cleanup function
    local function cleanup()
        if highlight and highlight.Parent then
            highlight:Destroy()
        end
        if billboard and billboard.Parent then
            billboard:Destroy()
        end
        doorHighlights[door] = nil
        doorBillboards[door] = nil
    end

    -- Auto-cleanup when door is removed
    doorESPConnections[door] = door.AncestryChanged:Connect(function(_, parent)
        if not parent then
            cleanup()
            if doorESPConnections[door] then
                doorESPConnections[door]:Disconnect()
                doorESPConnections[door] = nil
            end
        end
    end)
end

local function SetupDoorESP()
    -- Clear existing ESP
    for door, highlight in pairs(doorHighlights) do
        if highlight and highlight.Parent then
            highlight:Destroy()
        end
    end
    table.clear(doorHighlights)
    
    for door, billboard in pairs(doorBillboards) do
        if billboard and billboard.Parent then
            billboard:Destroy()
        end
    end
    table.clear(doorBillboards)
    
    for door, conn in pairs(doorESPConnections) do
        if conn then
            conn:Disconnect()
        end
    end
    table.clear(doorESPConnections)

    if not doorESPEnabled then return end

    -- Find existing doors
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("Model") then
            DoorESP(obj)
        end
    end

    -- Detect new doors
    doorESPConnections.descendantAdded = workspace.DescendantAdded:Connect(function(obj)
        if obj:IsA("Model") then
            DoorESP(obj)
        end
    end)
end

local function KillHiders()
    while killHidersEnabled do
        task.wait(0.25) -- Slight delay between checks
        
        local hider = nil
        -- Find nearest alive hider using IsHider attribute
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player:GetAttribute("IsHider") and 
               player.Character and player.Character:FindFirstChild("Humanoid") and 
               player.Character.Humanoid.Health > 0 then
                hider = player
                break
            end
        end

        if hider and hider.Character and hider.Character:FindFirstChild("HumanoidRootPart") then
            -- Teleport to hider
            LocalPlayer.Character:PivotTo(hider.Character:GetPrimaryPartCFrame())
            task.wait(0.2)
            
            -- Fire knife remote to kill
            local knife = LocalPlayer.Character:FindFirstChild("Knife") or LocalPlayer.Backpack:FindFirstChild("Knife")
            if knife then
                LocalPlayer.Character.Humanoid:EquipTool(knife)
                local args = { "UsingMoveCustom", knife, nil, { Clicked = true } }
                game:GetService("ReplicatedStorage").Remotes.UsedTool:FireServer(unpack(args))
            end
        end
    end
end

local function GetNearestGuard()
    local closest, dist = nil, math.huge
    local lroot = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not lroot then return end

    for _, model in pairs(workspace.Live:GetChildren()) do
        if IsGuard(model) then
            local guardRoot = model:FindFirstChild("HumanoidRootPart")
            if guardRoot then
                local distance = (guardRoot.Position - lroot.Position).Magnitude
                if distance < dist then
                    closest = guardRoot
                    dist = distance
                end
            end
        end
    end
    return closest
end

local function IsGuard(model)
    return model:IsA("Model") and 
           model:FindFirstChild("TypeOfGuard") and 
           (model.Name:find("Rebel") or model.Name:find("Guard")) and
           model:FindFirstChild("Humanoid") and 
           model.Humanoid.Health > 0
end

local function GetWeapon()
    local char = LocalPlayer.Character
    if not char then return end
    
    for _, weaponName in pairs(validWeapons) do
        local weapon = char:FindFirstChild(weaponName) or LocalPlayer.Backpack:FindFirstChild(weaponName)
        if weapon then return weapon end
    end
end

local function GetNearestEnemy(maxDist)
    local closest, dist = nil, maxDist or 15
    local lroot = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not lroot then return end

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local root = player.Character:FindFirstChild("HumanoidRootPart")
            local hum = player.Character:FindFirstChild("Humanoid")
            if root and hum and hum.Health > 0 then
                local distance = (root.Position - lroot.Position).Magnitude
                if distance < dist then
                    closest = player.Character
                    dist = distance
                end
            end
        end
    end
    return closest
end

local function ExecuteKillaura()
    local weapon = GetWeapon()
    local target = GetNearestEnemy(15)
    if not weapon or not target then return end

    -- Equip weapon if needed
    if weapon.Parent ~= LocalPlayer.Character then
        LocalPlayer.Character.Humanoid:EquipTool(weapon)
        task.wait(0.1)
    end

    -- Teleport close to target
    local targetPos = target:GetPrimaryPartCFrame()
    LocalPlayer.Character:PivotTo(targetPos * CFrame.new(0, 0, -2))

    -- Fire attack remote
    local args = {"UsingMoveCustom", weapon, nil, {Clicked = true}}
    game:GetService("ReplicatedStorage").Remotes.UsedTool:FireServer(unpack(args))
    
    -- Fire confirmation remote
    local args2 = {"UsingMoveCustom", weapon, true, {Clicked = true}}
    game:GetService("ReplicatedStorage").Remotes.UsedTool:FireServer(unpack(args2))
end

local function updateHitbox(guard)
    if not guard:IsA("Model") then return end
    local hrp = guard:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    
    -- Clear existing hitbox if any
    if hitboxParts[guard] then
        hitboxParts[guard]:Destroy()
        hitboxParts[guard] = nil
    end
    
    if not hitboxEnabled then return end
    
    -- Create a new invisible part that will act as the hitbox
    local hitbox = Instance.new("Part")
    hitbox.Name = "ExpandedHitbox"
    hitbox.Size = Vector3.new(hitboxSize, hitboxSize, hitboxSize)
    hitbox.Transparency = hitboxTransparency
    hitbox.Color = hitboxColor
    hitbox.Material = Enum.Material.ForceField
    hitbox.Anchored = false
    hitbox.CanCollide = false
    hitbox.CFrame = hrp.CFrame
    
    -- Weld to the guard's HRP
    local weld = Instance.new("WeldConstraint")
    weld.Part0 = hrp
    weld.Part1 = hitbox
    weld.Parent = hitbox
    
    hitbox.Parent = guard
    hitboxParts[guard] = hitbox
    
    -- Make the original HRP invisible and non-collidable
    hrp.Transparency = 1
    hrp.CanCollide = false
    
    -- Cleanup when guard is removed
    hitboxConnections[guard] = guard.AncestryChanged:Connect(function(_, parent)
        if not parent then
            if hitboxParts[guard] then
                hitboxParts[guard]:Destroy()
                hitboxParts[guard] = nil
            end
            if hitboxConnections[guard] then
                hitboxConnections[guard]:Disconnect()
                hitboxConnections[guard] = nil
            end
            -- Restore original HRP properties if guard still exists
            if guard.Parent then
                if hrp then
                    hrp.Transparency = 0
                    hrp.CanCollide = true
                end
            end
        end
    end)
end

local function setupHitboxes()
    -- Clear existing hitboxes
    for guard, hitbox in pairs(hitboxParts) do
        if hitbox and hitbox.Parent then
            hitbox:Destroy()
        end
        -- Restore original HRP properties
        if guard and guard.Parent then
            local hrp = guard:FindFirstChild("HumanoidRootPart")
            if hrp then
                hrp.Transparency = 0
                hrp.CanCollide = true
            end
        end
    end
    table.clear(hitboxParts)
    
    for guard, conn in pairs(hitboxConnections) do
        if conn then
            conn:Disconnect()
        end
    end
    table.clear(hitboxConnections)

    if not hitboxEnabled then return end
    
    -- Find all existing guards
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("Model") and obj:FindFirstChild("Humanoid") and 
           (obj.Name:lower():find("guard") or obj.Name:lower():find("triangle") or 
            obj.Name:lower():find("squid") or obj.Name:lower():find("circle")) then
            updateHitbox(obj)
        end
    end
    
    -- Listen for new guards
    hitboxConnections.descendantAdded = workspace.DescendantAdded:Connect(function(obj)
        if obj:IsA("Model") and obj:FindFirstChild("Humanoid") and 
           (obj.Name:lower():find("guard") or obj.Name:lower():find("triangle") or 
            obj.Name:lower():find("squid") or obj.Name:lower():find("circle")) then
            updateHitbox(obj)
        end
    end)
end

local function CreatePlayerESP(player)
    if not player.Character then return end

    -- Clear existing ESP if any
    if playerHighlights[player] then
        playerHighlights[player]:Destroy()
        playerHighlights[player] = nil
    end
    if playerBillboards[player] then
        playerBillboards[player]:Destroy()
        playerBillboards[player] = nil
    end

    if not playerESPEnabled then return end

    local highlight = Instance.new("Highlight")
    highlight.Name = "PlayerESP"
    highlight.Adornee = player.Character
    highlight.FillColor = Color3.fromRGB(0, 170, 255)  -- Blue
    highlight.OutlineColor = Color3.fromRGB(0, 100, 255)
    highlight.FillTransparency = 0.5
    highlight.Parent = player.Character
    playerHighlights[player] = highlight

    -- Floating text with health
    local billboard = Instance.new("BillboardGui")
    billboard.Adornee = player.Character:WaitForChild("Head")
    billboard.Size = UDim2.new(0, 100, 0, 40)
    billboard.StudsOffset = Vector3.new(0, 3, 0)
    billboard.AlwaysOnTop = true

    local label = Instance.new("TextLabel")
    label.Text = player.Name .. " (HP: 100)"
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextSize = 14
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(1, 0, 1, 0)
    label.Parent = billboard
    billboard.Parent = player.Character
    playerBillboards[player] = billboard

    -- Update health display
    local healthConnection
    if player.Character:FindFirstChild("Humanoid") then
        healthConnection = player.Character.Humanoid.HealthChanged:Connect(function(health)
            label.Text = player.Name .. " (HP: " .. math.floor(health) .. ")"
        end)
    end

    -- Cleanup function
    local function cleanup()
        if highlight and highlight.Parent then
            highlight:Destroy()
        end
        if billboard and billboard.Parent then
            billboard:Destroy()
        end
        if healthConnection then
            healthConnection:Disconnect()
        end
        playerHighlights[player] = nil
        playerBillboards[player] = nil
    end

    -- Track character changes
    playerESPConnections[player] = player.CharacterAdded:Connect(function(newChar)
        cleanup()
        CreatePlayerESP(player)  -- Recreate for new character
    end)

    -- Auto-cleanup when player leaves
    playerESPConnections[player.."Removing"] = player.AncestryChanged:Connect(function(_, parent)
        if not parent then cleanup() end
    end)
end

local function SetupPlayerESP()
    -- Clear existing ESP
    for player, highlight in pairs(playerHighlights) do
        if highlight and highlight.Parent then
            highlight:Destroy()
        end
    end
    table.clear(playerHighlights)
    
    for player, billboard in pairs(playerBillboards) do
        if billboard and billboard.Parent then
            billboard:Destroy()
        end
    end
    table.clear(playerBillboards)
    
    for player, conn in pairs(playerESPConnections) do
        if conn then
            conn:Disconnect()
        end
    end
    table.clear(playerESPConnections)

    if not playerESPEnabled then return end

    -- Initialize for all players
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then  -- Skip local player
            CreatePlayerESP(player)
        end
    end

    -- Track new players
    playerESPConnections.playerAdded = Players.PlayerAdded:Connect(function(player)
        CreatePlayerESP(player)
    end)
end

local function CreateGuardESP(guardModel)
    if not guardModel:FindFirstChild("Humanoid") then return end

    -- Clear existing ESP if any
    if guardHighlights[guardModel] then
        guardHighlights[guardModel]:Destroy()
        guardHighlights[guardModel] = nil
    end
    if guardBillboards[guardModel] then
        guardBillboards[guardModel]:Destroy()
        guardBillboards[guardModel] = nil
    end

    if not guardESPEnabled then return end

    local highlight = Instance.new("Highlight")
    highlight.Name = "GuardESP"
    highlight.Adornee = guardModel
    highlight.FillColor = Color3.fromRGB(255, 100, 0)  -- Orange
    highlight.OutlineColor = Color3.fromRGB(200, 50, 0)
    highlight.FillTransparency = 0.4
    highlight.Parent = guardModel
    guardHighlights[guardModel] = highlight

    -- Floating text
    local billboard = Instance.new("BillboardGui")
    billboard.Adornee = guardModel:WaitForChild("Head")
    billboard.Size = UDim2.new(0, 100, 0, 40)
    billboard.StudsOffset = Vector3.new(0, 3, 0)
    billboard.AlwaysOnTop = true

    local label = Instance.new("TextLabel")
    label.Text = "GUARD"
    label.TextColor3 = Color3.fromRGB(255, 255, 255)
    label.TextSize = 14
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(1, 0, 1, 0)
    label.Parent = billboard
    billboard.Parent = guardModel
    guardBillboards[guardModel] = billboard

    -- Cleanup function
    local function cleanup()
        if highlight and highlight.Parent then
            highlight:Destroy()
        end
        if billboard and billboard.Parent then
            billboard:Destroy()
        end
        guardHighlights[guardModel] = nil
        guardBillboards[guardModel] = nil
    end

    -- Auto-remove when guard dies
    guardESPConnections[guardModel] = guardModel.Humanoid.Died:Connect(cleanup)

    -- Auto-remove when guard is removed
    guardESPConnections[guardModel.."Removing"] = guardModel.AncestryChanged:Connect(function(_, parent)
        if not parent then
            cleanup()
            if guardESPConnections[guardModel] then
                guardESPConnections[guardModel]:Disconnect()
                guardESPConnections[guardModel] = nil
            end
        end
    end)
end

local function SetupGuardESP()
    -- Clear existing ESP
    for guard, highlight in pairs(guardHighlights) do
        if highlight and highlight.Parent then
            highlight:Destroy()
        end
    end
    table.clear(guardHighlights)
    
    for guard, billboard in pairs(guardBillboards) do
        if billboard and billboard.Parent then
            billboard:Destroy()
        end
    end
    table.clear(guardBillboards)
    
    for guard, conn in pairs(guardESPConnections) do
        if conn then
            conn:Disconnect()
        end
    end
    table.clear(guardESPConnections)

    if not guardESPEnabled then return end

    -- Find existing guards
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("Model") and obj:FindFirstChild("Humanoid") and obj.Name:lower():find("guard") then
            CreateGuardESP(obj)
        end
    end

    -- Detect new guards
    guardESPConnections.descendantAdded = workspace.DescendantAdded:Connect(function(obj)
        if obj:IsA("Model") and obj:FindFirstChild("Humanoid") and obj.Name:lower():find("guard") then
            CreateGuardESP(obj)
        end
    end)
end

-- Handle character respawns for all toggles
LocalPlayer.CharacterAdded:Connect(function(char)
    task.wait(1) -- Wait for character to load
    
    if noclipEnabled then
        noclipLoop()
    end
    
    if currentWalkSpeed then
        local humanoid = char:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = currentWalkSpeed
        end
    end
    
    if hitboxEnabled then
        setupHitboxes()
    end
    
    if playerESPEnabled then
        SetupPlayerESP()
    end
    
    if guardESPEnabled then
        SetupGuardESP()
    end
end)

-- Initialize ESP if enabled when script starts
if playerESPEnabled then
    SetupPlayerESP()
end

if guardESPEnabled then
    SetupGuardESP()
end

if hitboxEnabled then
    setupHitboxes()
end